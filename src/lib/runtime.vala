namespace Opal {
	using JSUtils;
	public class Runtime {		
	    private weak Context _context;
		public Context context {
		  get {return this._context;}
		}
		
		public string[] argv {get; set; default = new string[0];}

		public Runtime(bool? parser=null, string[]? argv = null, Context ctx = new Context()) {
			if (parser == null) {
				parser = false;
			}
			
			unowned Context foo = ctx;
			this._context = foo;
			this.argv = argv ?? new string[0];
			
			init_opal(context, parser, argv);
			init_lib();
		}
		
		public static void init_opal(Context context, bool parser=false, string[] argv = new string[0]) {
			// Opal runtime and parser
			context.exec(Opal.OPAL+Opal.OPAL_PARSER);

            var args = "";
            int i = 0;
            foreach (var a in argv) {
				args += @"'$(a)'";
				if (i < argv.length-1) {
					args += ",";
				}
				i += 1;
			}

            var argv_str = """Opal.casgn(Opal.Object, 'ARGV', [%s]);""".printf(args.escape(null));

            context.exec(argv_str);

            if (parser) {
			// require the parser 
				var code = "Opal.require('opal-parser');";
				context.exec(code);
			}	
						
			//print("OPAL: Ready!\n");
		}
		public const string OPALA="""
/* Generated by Opal 0.8.0.rc2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return (Opal.Object.$$proto.$read = function(path) {
    var self = this;

    return opala.read(path);;
  }, nil) && 'read'
})(Opal);	

/* Generated by Opal 0.8.0.rc2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return (Opal.Object.$$proto.$write = function(path, contents) {
    var self = this;

    return opala.write(path, contents);;
  }, nil) && 'write'
})(Opal);	
		""";
		
		public JSUtils.Value init_lib() {
		  var lib = context.exec("var opala={};opala;");
		  var name = new JSCore.String.with_utf8_c_string("read");
		  
		  lib.to_object().set_property(context, name, 
								new JSCore.Object.function_with_callback(context, name, (c, f, t, a, e) => {
									e = null;
			
									JSCore.Value n=null;
									var str = "";
									
									FileUtils.get_contents(Context._read_string(c,a[0]), out str, null);
									
									JSUtils.Value.string(c, str, out n);
									
									return n;
								}),
								JSCore.PropertyAttribute.ReadOnly,
								null);
		  
		  name = new JSCore.String.with_utf8_c_string("write");
		  
		  lib.to_object().set_property(context, name, 
								new JSCore.Object.function_with_callback(context, name, (c, f, t, a, e) => {
									e = null;
			
									JSCore.Value n=null;
									var str = "";
									
									FileUtils.set_contents(Context._read_string(c,a[0]), Context._read_string(c,a[1]));
									
									JSUtils.Value.string(c, str, out n);
									
									return n;
								}),
								JSCore.PropertyAttribute.ReadOnly,
								null);
										  
		  //print("OPALA: Ready.\n");
		  
		  context.exec(OPALA);
		  return lib;	
		}
		
		public JSUtils.Value require(string what) {
			return context.exec("""Opal.require("%s")""".printf(what));
		}
		
		public JSUtils.Value load(string path) {
			var code = "";
			FileUtils.get_contents(path, out code, null);
			return exec(code);
		}
		
		public JSUtils.Value exec(string code) {
			var s="""eval(Opal.compile("%s"));""".printf(code.escape(null));
			
			var result = context.exec(s);

			return result;
		}
	}
}
