/* Generated by Opal 0.8.0 */
Opal.modules["promise"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$reject!', '$class', '$object_id', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$lambda', '$reverse', '$pop', '$length', '$shift', '$each', '$wait', '$then', '$to_proc', '$map', '$reduce', '$always', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.value = def.action = def.exception = def.realized = def.delayed = def.error = def.prev = def.next = nil;
    Opal.defs(self, '$value', function(value) {
      var self = this;

      return self.$new().$resolve(value);
    });

    Opal.defs(self, '$error', function(value) {
      var self = this;

      return self.$new().$reject(value);
    });

    Opal.defs(self, '$when', function(promises) {
      var self = this;

      promises = $slice.call(arguments, 0);
      return $scope.get('When').$new(promises);
    });

    self.$attr_reader("error", "prev", "next");

    def.$initialize = function(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {})
      }
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return self.next = nil;
    };

    def.$value = function() {
      var $a, self = this;

      if ((($a = $scope.get('Promise')['$==='](self.value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.value.$value()
        } else {
        return self.value
      };
    };

    def['$act?'] = function() {
      var $a, self = this;

      return ((($a = self.action['$has_key?']("success")) !== false && $a !== nil) ? $a : self.action['$has_key?']("always"));
    };

    def.$action = function() {
      var self = this;

      return self.action.$keys();
    };

    def['$exception?'] = function() {
      var self = this;

      return self.exception;
    };

    def['$realized?'] = function() {
      var self = this;

      return self.realized['$!']()['$!']();
    };

    def['$resolved?'] = function() {
      var self = this;

      return self.realized['$==']("resolve");
    };

    def['$rejected?'] = function() {
      var self = this;

      return self.realized['$==']("reject");
    };

    def['$^'] = function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    };

    def['$<<'] = function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    };

    def['$>>'] = function(promise) {
      var $a, $b, $c, self = this;

      self.next = promise;
      if ((($a = self['$exception?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ((($a = self['$resolved?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ((($a = self['$rejected?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = self.action['$has_key?']("failure")['$!']()) !== false && $b !== nil) ? $b : $scope.get('Promise')['$==='](((function() {if ((($c = self.delayed) !== nil && (!$c.$$is_boolean || $c == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ((($a = promise.$action()['$include?']("always")) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    };

    def.$resolve = function(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
      if ((($a = block = ((($b = self.action['$[]']("success")) !== false && $b !== nil) ? $b : self.action['$[]']("always"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
        self['$exception!'](e)
        }else { throw $err; }
      };
      return self;
    };

    def['$resolve!'] = function(value) {
      var $a, self = this;

      self.realized = "resolve";
      self.value = value;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.next.$resolve(value)
        } else {
        return self.delayed = [value]
      };
    };

    def.$reject = function(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
      if ((($a = block = ((($b = self.action['$[]']("failure")) !== false && $b !== nil) ? $b : self.action['$[]']("always"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        if ((($a = self.action['$has_key?']("always")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
        self['$exception!'](e)
        }else { throw $err; }
      };
      return self;
    };

    def['$reject!'] = function(value) {
      var $a, self = this;

      self.realized = "reject";
      self.error = value;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.next.$reject(value)
        } else {
        return self.delayed = [value]
      };
    };

    def['$exception!'] = function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    };

    def.$then = TMP_1 = function() {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new($hash2(["success"], {"success": block})));
    };

    Opal.defn(self, '$do', def.$then);

    def.$fail = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new($hash2(["failure"], {"failure": block})));
    };

    Opal.defn(self, '$rescue', def.$fail);

    Opal.defn(self, '$catch', def.$fail);

    def.$always = TMP_3 = function() {
      var $a, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new($hash2(["always"], {"always": block})));
    };

    Opal.defn(self, '$finally', def.$always);

    Opal.defn(self, '$ensure', def.$always);

    def.$trace = TMP_4 = function(depth) {
      var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil
      }
      TMP_4.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Trace').$new(depth, block));
    };

    def.$inspect = function() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ": " + ((((($a = self.value) !== false && $a !== nil) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    };

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_6;

      Opal.defs(self, '$it', function(promise) {
        var $a, $b, self = this, current = nil, prev = nil;

        current = [];
        if ((($a = ((($b = promise['$act?']()) !== false && $b !== nil) ? $b : promise.$prev()['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          current.$push(promise.$value())};
        if ((($a = prev = promise.$prev()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      });

      return (def.$initialize = TMP_6 = function(depth, block) {
        var $a, $b, TMP_5, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

        TMP_6.$$p = null;
        self.depth = depth;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_6, null).apply(self, [$hash2(["success"], {"success": ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          trace.$pop();
          if ((($a = (($b = depth !== false && depth !== nil) ? $rb_le(depth, trace.$length()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return ($a = block).$call.apply($a, [].concat(trace));}, TMP_5.$$s = self, TMP_5), $a).call($b)})]);
      }, nil) && 'initialize';
    })(self, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_9, TMP_11, TMP_13, TMP_17;

      def.wait = nil;
      def.$initialize = TMP_7 = function(promises) {
        var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = []
        }
        TMP_7.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_7, null).apply(self, []);
        self.wait = [];
        return ($a = ($b = promises).$each, $a.$$p = (TMP_8 = function(promise){var self = TMP_8.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_8.$$s = self, TMP_8), $a).call($b);
      };

      def.$each = TMP_9 = function() {
        var $a, $b, TMP_10, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_10 = function(values){var self = TMP_10.$$s || this, $a, $b;
if (values == null) values = nil;
        return ($a = ($b = values).$each, $a.$$p = block.$to_proc(), $a).call($b)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      };

      def.$collect = TMP_11 = function() {
        var $a, $b, TMP_12, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        TMP_11.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_12 = function(values){var self = TMP_12.$$s || this, $a, $b;
if (values == null) values = nil;
        return $scope.get('When').$new(($a = ($b = values).$map, $a.$$p = block.$to_proc(), $a).call($b))}, TMP_12.$$s = self, TMP_12), $a).call($b);
      };

      def.$inject = TMP_13 = function(args) {
        var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil;

        args = $slice.call(arguments, 0);
        TMP_13.$$p = null;
        return ($a = ($b = self).$then, $a.$$p = (TMP_14 = function(values){var self = TMP_14.$$s || this, $a, $b;
if (values == null) values = nil;
        return ($a = ($b = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($b, [].concat(args))}, TMP_14.$$s = self, TMP_14), $a).call($b);
      };

      Opal.defn(self, '$map', def.$collect);

      Opal.defn(self, '$reduce', def.$inject);

      def.$wait = function(promise) {
        var $a, $b, TMP_15, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $a;
          if (self.next == null) self.next = nil;

        if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_15.$$s = self, TMP_15), $a).call($b);
        return self;
      };

      Opal.defn(self, '$and', def.$wait);

      def['$>>'] = TMP_17 = function() {var $zuper = $slice.call(arguments, 0);
        var $a, $b, TMP_16, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

        TMP_17.$$p = null;
        return ($a = ($b = Opal.find_super_dispatcher(self, '>>', TMP_17, $iter).apply(self, $zuper)).$tap, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

        return self.$try()}, TMP_16.$$s = self, TMP_16), $a).call($b);
      };

      return (def.$try = function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }, nil) && 'try';
    })(self, self);
  })(self, null)
};

/* Generated by Opal 0.8.0 */
Opal.modules["browser/canvas/style"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$attr_reader', '$to_n', '$[]', '$new']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Canvas(){};
      var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $StyleObject(){};
        var self = $StyleObject = $klass($base, $super, 'StyleObject', $StyleObject);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.context = nil;
        self.$include($scope.get('Native'));

        self.$attr_reader("context");

        return (def.$initialize = TMP_1 = function(context) {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          self.context = context;
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [self.context.$to_n()]);
        }, nil) && 'initialize';
      })(self, null);

      return (function($base, $super) {
        function $Style(){};
        var self = $Style = $klass($base, $super, 'Style', $Style);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        def["native"] = nil;
        (function($base, $super) {
          function $Line(){};
          var self = $Line = $klass($base, $super, 'Line', $Line);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          self.$attr_reader("width", "cap", "join", "miter_limit");

          def['$width='] = function(value) {
            var self = this;

            return self["native"].lineWidth = self.width = value;
          };

          def['$cap='] = function(value) {
            var self = this;

            return self["native"].lineCap = self.cap = value;
          };

          def['$join='] = function(value) {
            var self = this;

            return self["native"].lineJoin = self.join = value;
          };

          return (def['$miter_limit='] = function(value) {
            var self = this;

            return self["native"].miterLimit = self.miter_limit = value;
          }, nil) && 'miter_limit=';
        })(self, $scope.get('StyleObject'));

        (function($base, $super) {
          function $Text(){};
          var self = $Text = $klass($base, $super, 'Text', $Text);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          self.$attr_reader("font", "align", "baseline");

          def['$font='] = function(value) {
            var self = this;

            return self["native"].font = self.font = value;
          };

          def['$align='] = function(value) {
            var self = this;

            return self["native"].textAlign = self.align = value;
          };

          return (def['$baseline='] = function(value) {
            var self = this;

            return self["native"].textBaseline = self.baseline = value;
          }, nil) && 'baseline=';
        })(self, $scope.get('StyleObject'));

        (function($base, $super) {
          function $Image(){};
          var self = $Image = $klass($base, $super, 'Image', $Image);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          self.$attr_reader("smooth");

          Opal.defn(self, '$smooth?', def.$smooth);

          def['$smooth!'] = function() {
            var self = this;

            return self["native"].mozImageSmoothingEnabled = self.smooth = true;
          };

          return (def['$no_smooth!'] = function() {
            var self = this;

            return self["native"].mozImageSmoothingEnabled = self.smooth = false;
          }, nil) && 'no_smooth!';
        })(self, $scope.get('StyleObject'));

        (function($base, $super) {
          function $Shadow(){};
          var self = $Shadow = $klass($base, $super, 'Shadow', $Shadow);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          self.$attr_reader("offset", "blur", "color");

          def['$offset='] = function(value) {
            var self = this;

            self["native"].shadowOffsetX = value['$[]']("x");
            self["native"].shadowOffsetY = value['$[]']("y");
            return self.offset = value;
          };

          def['$blur='] = function(value) {
            var self = this;

            return self["native"].shadowBlur = self.blur = value;
          };

          return (def['$color='] = function(value) {
            var self = this;

            return self["native"].shadowColor = self.color = value;
          }, nil) && 'color=';
        })(self, $scope.get('StyleObject'));

        self.$attr_reader("line", "text", "image", "shadow", "fill", "stroke", "alpha", "composite_operation");

        def.$initialize = TMP_2 = function(context) {
          var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

          TMP_2.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [context]);
          self.line = $scope.get('Line').$new(context);
          self.text = $scope.get('Text').$new(context);
          self.image = $scope.get('Image').$new(context);
          return self.shadow = $scope.get('Shadow').$new(context);
        };

        def['$fill='] = function(value) {
          var self = this;

          return self["native"].fillStyle = (self.fill = value).$to_n();
        };

        def['$stroke='] = function(value) {
          var self = this;

          return self["native"].strokeStyle = (self.stroke = value).$to_n();
        };

        def['$alpha='] = function(value) {
          var self = this;

          return self["native"].globalAlpha = self.alpha = value;
        };

        return (def['$composite_operation='] = function(value) {
          var self = this;

          return self["native"].globalCompositeOperation = self.composite_operation = value;
        }, nil) && 'composite_operation=';
      })(self, $scope.get('StyleObject'));
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.0 */
Opal.modules["browser/canvas/text"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$attr_reader', '$to_n']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Canvas(){};
      var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Text(){};
        var self = $Text = $klass($base, $super, 'Text', $Text);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.context = def["native"] = nil;
        self.$include($scope.get('Native'));

        self.$attr_reader("context");

        def.$initialize = TMP_1 = function(context) {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          self.context = context;
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [self.context.$to_n()]);
        };

        def.$measure = function(text) {
          var self = this;

          return self["native"].measureText(text);
        };

        def.$fill = function(text, x, y, max_width) {
          var $a, self = this;

          if (x == null) {
            x = nil
          }
          if (y == null) {
            y = nil
          }
          if (max_width == null) {
            max_width = nil
          }
          ((($a = x) !== false && $a !== nil) ? $a : x = 0);
          ((($a = y) !== false && $a !== nil) ? $a : y = 0);
          if (max_width !== false && max_width !== nil) {
            self["native"].fillText(text, x, y, max_width);
            } else {
            self["native"].fillText(text, x, y);
          };
          return self.context;
        };

        return (def.$stroke = function(text, x, y, max_width) {
          var $a, self = this;

          if (x == null) {
            x = nil
          }
          if (y == null) {
            y = nil
          }
          if (max_width == null) {
            max_width = nil
          }
          ((($a = x) !== false && $a !== nil) ? $a : x = 0);
          ((($a = y) !== false && $a !== nil) ? $a : y = 0);
          if (max_width !== false && max_width !== nil) {
            self["native"].strokeText(text, x, y, max_width);
            } else {
            self["native"].strokeText(text, x, y);
          };
          return self.context;
        }, nil) && 'stroke';
      })(self, null)
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.0 */
Opal.modules["browser/canvas/data"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$allocate', '$instance_eval', '$to_a', '$to_n', '$include', '$attr_reader']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Canvas(){};
      var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Data(){};
        var self = $Data = $klass($base, $super, 'Data', $Data);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        def.canvas = def["native"] = nil;
        Opal.defs(self, '$create', function(canvas, width, height) {
          var $a, $b, TMP_1, self = this, data = nil;

          data = self.$allocate();
          ($a = ($b = data).$instance_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          self.canvas = canvas.$to_a();
            self.x = 0;
            self.y = 0;
            self.width = width;
            self.height = height;
            return self["native"] = canvas.$to_n().createImageData(width, height);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return data;
        });

        self.$include($scope.get('Native'));

        self.$attr_reader("x", "y", "width", "height");

        def.$initialize = TMP_2 = function(canvas, x, y, width, height) {
          var self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

          TMP_2.$$p = null;
          self.canvas = canvas.$to_n();
          self.x = x;
          self.y = y;
          self.width = width;
          self.height = height;
          return Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [self.canvas.getImageData(x, y, width, height)]);
        };

        def.$length = function() {
          var self = this;

          return self["native"].data.length;
        };

        def['$[]'] = function(index) {
          var self = this;

          return self["native"].data[index];
        };

        def['$[]='] = function(index, value) {
          var self = this;

          return self["native"].data[index] = value;
        };

        def.$save = function(x, y) {
          var $a, self = this;

          if (x == null) {
            x = nil
          }
          if (y == null) {
            y = nil
          }
          ((($a = x) !== false && $a !== nil) ? $a : x = 0);
          ((($a = y) !== false && $a !== nil) ? $a : y = 0);
          return self.canvas.putImageData(self["native"], x, y);
        };

        def.$save_to = function(canvas, x, y) {
          var $a, self = this;

          if (x == null) {
            x = nil
          }
          if (y == null) {
            y = nil
          }
          ((($a = x) !== false && $a !== nil) ? $a : x = 0);
          ((($a = y) !== false && $a !== nil) ? $a : y = 0);
          return canvas.$to_n().putImageData(self["native"], x, y);
        };

        return Opal.defn(self, '$size', def.$length);
      })(self, null)
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.0 */
Opal.modules["browser/canvas/gradient"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$attr_reader', '$length', '$===', '$to_n', '$raise', '$instance_eval', '$to_proc']);
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Canvas(){};
      var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Gradient(){};
        var self = $Gradient = $klass($base, $super, 'Gradient', $Gradient);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.context = nil;
        self.$include($scope.get('Native'));

        self.$attr_reader("context");

        def.$initialize = TMP_1 = function(context, args) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $case = nil;

          args = $slice.call(arguments, 1);
          TMP_1.$$p = null;
          self.context = context;
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [(function() {$case = args.$length();if ((4)['$===']($case)) {return self.context.$to_n().createLinearGradient.apply(self, args);}else if ((6)['$===']($case)) {return self.context.$to_n().createRadialGradient.apply(self, args);}else {return self.$raise($scope.get('ArgumentError'), "don't know where to dispatch")}})()]);
          return ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        };

        return (def.$add = function(position, color) {
          var self = this;

          self.context.$to_n().addColorStop(position, color);
          return self;
        }, nil) && 'add';
      })(self, null)
    })(self, null)
  })(self)
};

/* Generated by Opal 0.8.0 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$===', '$first', '$shift', '$create_element', '$[]=', '$width', '$height', '$!', '$==', '$node_name', '$raise', '$to_n', '$new', '$draw_image', '$to_i', '$[]', '$append_to', '$on', '$resolve', '$DOM', '$to_proc', '$move_to', '$line_to', '$length', '$quadratic_curve_to', '$bezier_curve_to', '$element', '$is_a?', '$save', '$instance_eval', '$restore', '$path', '$for']);
  self.$require("promise");
  self.$require("browser/canvas/style");
  self.$require("browser/canvas/text");
  self.$require("browser/canvas/data");
  self.$require("browser/canvas/gradient");
  return (function($base) {
    var self = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_12;

    (function($base, $super) {
      function $Canvas(){};
      var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

      def.element = def.image = def["native"] = nil;
      self.$include($scope.get('Native'));

      self.$attr_reader("element", "style", "text");

      def.$initialize = TMP_1 = function(args) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, element = nil;
        if ($gvars.document == null) $gvars.document = nil;

        args = $slice.call(arguments, 0);
        TMP_1.$$p = null;
        if ((($a = (($scope.get('DOM')).$$scope.get('Element'))['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
          element = args.$shift();
          if ((($a = (((($scope.get('DOM')).$$scope.get('Element'))).$$scope.get('Image'))['$==='](element)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.image = element
            } else {
            self.element = element
          };
        } else if ((($a = $scope.get('Canvas')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.image = args.$first()};
        if ((($a = self.element) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.element = $gvars.document.$create_element("canvas");
          if ((($a = self.image) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.element['$[]=']("width", self.image.$width());
            self.element['$[]=']("height", self.image.$height());
            } else {
            self.element['$[]=']("width", args.$shift());
            self.element['$[]=']("height", args.$shift());
          };
        };
        if ((($a = self.element.$node_name()['$==']("CANVAS")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "the element isn't a <canvas> element")};
        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [self.element.$to_n().getContext('2d')]);
        self.style = $scope.get('Style').$new(self);
        self.text = $scope.get('Text').$new(self);
        if ((($a = self.image) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$draw_image(self.image)
          } else {
          return nil
        };
      };

      def.$width = function() {
        var self = this;

        return self.element['$[]']("width").$to_i();
      };

      def.$height = function() {
        var self = this;

        return self.element['$[]']("height").$to_i();
      };

      def.$append_to = function(parent) {
        var self = this;

        return self.element.$append_to(parent);
      };

      def.$load = function(path) {
        var $a, $b, TMP_2, self = this, promise = nil, image = nil;
        if ($gvars.document == null) $gvars.document = nil;

        promise = $scope.get('Promise').$new();
        image = $gvars.document.$create_element("img");
        ($a = ($b = image).$on, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return promise.$resolve(image)}, TMP_2.$$s = self, TMP_2), $a).call($b, "load");
        image['$[]=']("src", path);
        return promise;
      };

      def.$data = function(x, y, width, height) {
        var $a, self = this;

        if (x == null) {
          x = nil
        }
        if (y == null) {
          y = nil
        }
        if (width == null) {
          width = nil
        }
        if (height == null) {
          height = nil
        }
        ((($a = x) !== false && $a !== nil) ? $a : x = 0);
        ((($a = y) !== false && $a !== nil) ? $a : y = 0);
        ((($a = width) !== false && $a !== nil) ? $a : width = self.$width());
        ((($a = height) !== false && $a !== nil) ? $a : height = self.$height());
        return $scope.get('Data').$new(self, x, y, width, height);
      };

      def.$pattern = function(image, type) {
        var self = this;

        if (type == null) {
          type = "repeat"
        }
        return self["native"].createPattern(self.$DOM(image).$to_n(), type);
      };

      def.$gradient = TMP_3 = function(args) {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        args = $slice.call(arguments, 0);
        TMP_3.$$p = null;
        return ($a = ($b = $scope.get('Gradient')).$new, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(args));
      };

      def.$clear = function(x, y, width, height) {
        var $a, self = this;

        if (x == null) {
          x = nil
        }
        if (y == null) {
          y = nil
        }
        if (width == null) {
          width = nil
        }
        if (height == null) {
          height = nil
        }
        ((($a = x) !== false && $a !== nil) ? $a : x = 0);
        ((($a = y) !== false && $a !== nil) ? $a : y = 0);
        ((($a = width) !== false && $a !== nil) ? $a : width = self.$width());
        ((($a = height) !== false && $a !== nil) ? $a : height = self.$height());
        return self["native"].clearRect(x, y, width, height);
      };

      def.$begin = function() {
        var self = this;

        self["native"].beginPath();
        return self;
      };

      def.$close = function() {
        var self = this;

        self["native"].closePath();
        return self;
      };

      def.$save = function() {
        var self = this;

        self["native"].save();
        return self;
      };

      def.$restore = function() {
        var self = this;

        self["native"].restore();
        return self;
      };

      def.$move_to = function(x, y) {
        var self = this;

        self["native"].moveTo(x, y);
        return self;
      };

      Opal.defn(self, '$move', def.$move_to);

      def.$line_to = function(x, y) {
        var self = this;

        self["native"].lineTo(x, y);
        return self;
      };

      def.$line = function(x1, y1, x2, y2) {
        var self = this;

        self.$move_to(x1, y1);
        return self.$line_to(x2, y2);
      };

      def.$rect = function(x, y, width, height) {
        var self = this;

        self["native"].rect(x, y, width, height);
        return self;
      };

      def.$arc = function(x, y, radius, angle, clockwise) {
        var self = this;

        if (clockwise == null) {
          clockwise = false
        }
        self["native"].arc(x, y, radius, angle['$[]']("start"), angle['$[]']("end"), !clockwise);
        return self;
      };

      def.$quadratic_curve_to = function(cp1x, cp1y, x, y) {
        var self = this;

        self["native"].quadraticCurveTo(cp1x, cp1y, x, y);
        return self;
      };

      def.$bezier_curve_to = function(cp1x, cp1y, cp2x, cp2y, x, y) {
        var self = this;

        self["native"].bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
        return self;
      };

      def.$curve_to = function(args) {
        var $a, $b, self = this, $case = nil;

        args = $slice.call(arguments, 0);
        $case = args.$length();if ((4)['$===']($case)) {($a = self).$quadratic_curve_to.apply($a, [].concat(args))}else if ((6)['$===']($case)) {($b = self).$bezier_curve_to.apply($b, [].concat(args))}else {self.$raise($scope.get('ArgumentError'), "don't know where to dispatch")};
        return self;
      };

      def.$draw_image = function(image, args) {
        var $a, self = this, source = nil, destination = nil, $case = nil;

        args = $slice.call(arguments, 1);
        if ((($a = $scope.get('Canvas')['$==='](image)) !== nil && (!$a.$$is_boolean || $a == true))) {
          image = image.$element()
          } else {
          image = self.$DOM(image)
        };
        if ((($a = args.$first()['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          $a = Opal.to_ary(args), source = ($a[0] == null ? nil : $a[0]), destination = ($a[1] == null ? nil : $a[1]);
          self["native"].drawImage(image.$to_n(), source['$[]']("x"), source['$[]']("y"), source['$[]']("width"), source['$[]']("height"), destination['$[]']("x"), destination['$[]']("y"), destination['$[]']("width"), destination['$[]']("height"));
          } else {
          $case = args.$length();if ((0)['$===']($case)) {self["native"].drawImage(image.$to_n(), 0, 0);}else if ((2)['$===']($case)) {self["native"].drawImage(image.$to_n(), args['$[]'](0), args['$[]'](1));}else if ((4)['$===']($case)) {self["native"].drawImage(image.$to_n(), args['$[]'](0), args['$[]'](1), args['$[]'](2), args['$[]'](3));}
        };
        return self;
      };

      def.$translate = TMP_4 = function(x, y) {
        var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

        TMP_4.$$p = null;
        if (block !== false && block !== nil) {
          self.$save();
          self["native"].translate(x, y);
          ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
          self.$restore();
          } else {
          self["native"].translate(x, y);
        };
        return self;
      };

      def.$rotate = TMP_5 = function(angle) {
        var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

        TMP_5.$$p = null;
        if (block !== false && block !== nil) {
          self.$save();
          self["native"].rotate(angle);
          ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
          self.$restore();
          } else {
          self["native"].rotate(angle);
        };
        return self;
      };

      def.$scale = TMP_6 = function(x, y) {
        var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

        TMP_6.$$p = null;
        if (block !== false && block !== nil) {
          self.$save();
          self["native"].scale(x, y);
          ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
          self.$restore();
          } else {
          self["native"].scale(x, y);
        };
        return self;
      };

      def.$transform = TMP_7 = function(m11, m12, m21, m22, dx, dy) {
        var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

        TMP_7.$$p = null;
        if (block !== false && block !== nil) {
          self.$save();
          self["native"].transform(m11, m12, m21, m22, dx, dy);
          ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
          self.$restore();
          } else {
          self["native"].transform(m11, m12, m21, m22, dx, dy);
        };
        return self;
      };

      def.$path = TMP_8 = function() {
        var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        self["native"].beginPath();
        ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        self["native"].closePath();
        return self;
      };

      def.$fill = TMP_9 = function() {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        if (block !== false && block !== nil) {
          ($a = ($b = self).$path, $a.$$p = block.$to_proc(), $a).call($b)};
        self["native"].fill();
        return self;
      };

      def.$stroke = TMP_10 = function() {
        var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

        TMP_10.$$p = null;
        if (block !== false && block !== nil) {
          ($a = ($b = self).$path, $a.$$p = block.$to_proc(), $a).call($b)};
        self["native"].stroke();
        return self;
      };

      def.$clip = TMP_11 = function() {
        var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        TMP_11.$$p = null;
        if (block !== false && block !== nil) {
          ($a = ($b = self).$path, $a.$$p = block.$to_proc(), $a).call($b)};
        self["native"].clip();
        return self;
      };

      def['$point_in_path?'] = function(x, y) {
        var self = this;

        return self["native"].isPointInPath(x, y);
      };

      return (def.$to_data = function(type) {
        var self = this;

        return self.element.$to_n().toDataUrl(type);
      }, nil) && 'to_data';
    })(self, null);

    ($a = ($b = (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Builder'))).$for, $a.$$p = (TMP_12 = function(b, item){var self = TMP_12.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
    return item.$element()}, TMP_12.$$s = self, TMP_12), $a).call($b, $scope.get('Canvas'));
  })(self);
})(Opal);
