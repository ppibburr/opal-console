/* Generated by Opal 0.8.0.rc2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, $c, TMP_3, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars, $range = Opal.range, opts = nil, source = nil, parser = nil, code = nil, e = nil;
  if ($gvars["0"] == null) $gvars["0"] = nil;

  Opal.add_stubs(['$split', '$!', '$empty?', '$=~', '$first', '$index', '$raise', '$==', '$[]', '$shift', '$nil?', '$map', '$include?', '$<<', '$has_key?', '$[]=', '$flatten', '$puts', '$print', '$ljust', '$new', '$getopts', '$set_debug', '$usage', '$dump', '$length', '$read', '$last', '$write', '$each', '$append_argv', '$is_a?', '$run']);
  (function($base) {
    var self = $module($base, 'Getopt');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Std(){};
      var self = $Std = $klass($base, $super, 'Std', $Std);

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Error(){};
        var self = $Error = $klass($base, $super, 'Error', $Error);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })(self, $scope.get('StandardError'));

      Opal.cdecl($scope, 'VERSION', "1.4.2");

      return (Opal.defs(self, '$getopts', function(switches) {
        var $a, $b, $c, TMP_1, $d, self = this, args = nil, hash = nil, first = nil, rest = nil, pos = nil, temp_args = nil, err = nil;

        args = switches.$split(/ */);
        hash = $hash2([], {});
        while ((($b = ($c = $scope.get('ARGV')['$empty?']()['$!'](), $c !== false && $c !== nil ?$scope.get('ARGV').$first()['$=~'](/^-(.)(.*)/) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
        $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](1)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))], first = $b[0], rest = $b[1];
        pos = switches.$index(first);
        if (pos !== false && pos !== nil) {
          } else {
          self.$raise($scope.get('Error'), "invalid option '" + (first) + "'")
        };
        if (args['$[]']($rb_plus(pos, 1))['$=='](":")) {
          $scope.get('ARGV').$shift();
          if ((($b = rest['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            rest = $scope.get('ARGV').$shift();
            if ((($b = ((($c = rest['$nil?']()) !== false && $c !== nil) ? $c : rest['$empty?']())) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.$raise($scope.get('Error'), "missing argument for '-" + (args['$[]'](pos)) + "'")};
            temp_args = ($b = ($c = args).$map, $b.$$p = (TMP_1 = function(e){var self = TMP_1.$$s || this;
if (e == null) e = nil;
            return "-" + (e)}, TMP_1.$$s = self, TMP_1), $b).call($c);
            if ((($b = ((($d = temp_args['$include?'](rest)) !== false && $d !== nil) ? $d : temp_args['$include?'](rest['$[]']($range(1, -1, false))))) !== nil && (!$b.$$is_boolean || $b == true))) {
              err = "cannot use switch '" + (rest) + "' as argument ";
              err['$<<']("to another switch");
              self.$raise($scope.get('Error'), err);};
            if ((($b = hash['$has_key?'](first)) !== nil && (!$b.$$is_boolean || $b == true))) {
              hash['$[]='](first, [hash['$[]'](first), rest].$flatten())
              } else {
              hash['$[]='](first, rest)
            };
          } else if ((($b = ((($d = args['$include?'](rest)) !== false && $d !== nil) ? $d : args['$include?'](rest['$[]']($range(1, -1, false))))) !== nil && (!$b.$$is_boolean || $b == true))) {
            err = "cannot use switch '" + (rest) + "' as argument ";
            err = $rb_plus(err, "to another switch");
            self.$raise($scope.get('Error'), err);};
          } else {
          hash['$[]='](first, true);
          if ((($b = rest['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            $scope.get('ARGV').$shift()
            } else {
            $scope.get('ARGV')['$[]='](0, "-" + (rest))
          };
        };};
        return hash;
      }), nil) && 'getopts';
    })(self, null)
  })(self);
  $scope.get('ARGV').$shift();
  Opal.cdecl($scope, 'VERSION', "0.1.0");
  Opal.cdecl($scope, 'OPTIONS', $hash2(["e", "v", "h", "w", "c", "j", "r LIB", "d TARGET", "D", "E"], {"e": "Execute inline ruby script", "v": "Print version", "h": "Print this message", "w": "run in headless WebKit", "c": "Transpile ruby source to JS", "j": "Execute inline js", "r LIB": "require LIB", "d TARGET": "dump the bridge code of an extension TARGET", "D": "Show debugging messages", "E": "Force exit after executing script with '-w'"}));
  Opal.Object.$$proto.$usage = function(msg) {
    var $a, $b, TMP_2, self = this;

    if (msg == null) {
      msg = ""
    }
    self.$puts(msg);
    self.$puts("opala - A ruby source runner/transpiler via VRbJS in JavaScriptCore\n\n");
    self.$puts("Usage:");
    self.$puts("opala [OPTIONs] [PATH|CODE]\n\n");
    self.$puts("OPTIONS:");
    return ($a = ($b = $scope.get('OPTIONS')).$map, $a.$$p = (TMP_2 = function(k, v){var self = TMP_2.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
    return self.$print($rb_plus((("-") + (k)).$ljust(10), "" + (v) + "\n"))}, TMP_2.$$s = self, TMP_2), $a).call($b);
  };
  try {
  Opal.cdecl($scope, 'PROGRAM', $scope.get('Program').$new());
    opts = (($scope.get('Getopt')).$$scope.get('Std')).$getopts("d:vhwcejsr:ED");
    $gvars["0"] = "(file)";
    if ((($a = opts['$[]']("D")) !== nil && (!$a.$$is_boolean || $a == true))) {
      $scope.get('VRbJS').$set_debug(true)};
    if ((($a = ($b = opts['$[]']("E")['$!']()['$!'](), $b !== false && $b !== nil ?opts['$[]']("w")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
      self.$puts("WARN: -E without -w is useless")};
    if ((($a = ((($b = ((($c = opts['$[]']("v")) !== false && $c !== nil) ? $c : opts['$[]']("h"))) !== false && $b !== nil) ? $b : opts['$[]']("d"))) !== nil && (!$a.$$is_boolean || $a == true))) {
      if ((($a = opts['$[]']("v")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$puts($scope.get('VERSION'))
      } else if ((($a = opts['$[]']("h")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$usage()
      } else if ((($a = opts['$[]']("d")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$puts($scope.get('PROGRAM').$dump(opts['$[]']("d")))
        } else {
        return nil
      }
    } else if ((($a = opts['$[]']("c")) !== nil && (!$a.$$is_boolean || $a == true))) {
      if ((($a = opts.$length()['$=='](1)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise("Too many options passed. -c takes 0 options")};
      source = $scope.get('PROGRAM').$read($scope.get('ARGV').$last());
      Opal.require('opal-parser');
      return $scope.get('PROGRAM').$write($rb_plus($scope.get('ARGV').$last(), ".js"), Opal.compile(source));
      } else {
      $gvars["0"] = "(file)";
      parser = true;
      if ((($a = opts['$[]']("e")) !== nil && (!$a.$$is_boolean || $a == true))) {
        code = $scope.get('ARGV').$last()
      } else if ((($a = opts['$[]']("j")) !== nil && (!$a.$$is_boolean || $a == true))) {
        code = $scope.get('ARGV').$last();
        parser = false;
        } else {
        $gvars["0"] = $scope.get('ARGV').$shift();
        code = $scope.get('PROGRAM').$read($gvars["0"]);
        ($a = ($b = $scope.get('ARGV')).$each, $a.$$p = (TMP_3 = function(a){var self = TMP_3.$$s || this;
if (a == null) a = nil;
        return $scope.get('PROGRAM').$append_argv(a)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        if ((($a = $gvars["0"].$split(".").$last()['$==']("rb")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          parser = false};
      };
      if ((($a = opts['$[]']("r")['$is_a?']($scope.get('Array'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = opts['$[]']("r")['$!']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("r", [opts['$[]']("r")])}};
      return $scope.get('PROGRAM').$run(code, opts['$[]']("w")['$!']()['$!'](), parser, opts['$[]']("D")['$!']()['$!'](), opts['$[]']("E")['$!']()['$!'](), $gvars["0"], opts['$[]']("r"));
    };
  } catch ($err) {if (true) {e = $err;
    return self.$usage(e)
    }else { throw $err; }
  };
})(Opal);
