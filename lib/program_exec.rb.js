/* Generated by Opal 0.8.0.rc2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, $c, $d, TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $gvars = Opal.gvars, opts = nil, source = nil, parser = nil, code = nil, e = nil;
  if ($gvars["0"] == null) $gvars["0"] = nil;

  Opal.add_stubs(['$require', '$shift', '$puts', '$map', '$print', '$ljust', '$new', '$getopts', '$[]', '$set_debug', '$!', '$usage', '$dump', '$==', '$length', '$raise', '$read', '$last', '$write', '$each', '$append_argv', '$split', '$is_a?', '$[]=', '$p', '$run']);
  $scope.get('VRbJS').$require("getopt");
  $scope.get('ARGV').$shift();
  Opal.cdecl($scope, 'VERSION', "0.1.0");
  Opal.cdecl($scope, 'OPTIONS', $hash2(["e", "v", "h", "w", "c", "j", "r LIB", "d TARGET", "D", "E", "U URL"], {"e": "Execute inline ruby script", "v": "Print version", "h": "Print this message", "w": "run in headless WebKit", "c": "Transpile ruby source to JS", "j": "Execute inline js", "r LIB": "require LIB", "d TARGET": "dump the bridge code of an extension TARGET", "D": "Show debugging messages", "E": "Force exit after executing script with '-w'", "U URL": "The url for the webview to open ie, '<http://|file:///>foo/bar.html' (valid with -w)"}));
  Opal.Object.$$proto.$usage = function(msg) {
    var $a, $b, TMP_1, self = this;

    if (msg == null) {
      msg = ""
    }
    self.$puts(msg);
    self.$puts("opala - A ruby source runner/transpiler via VRbJS in JavaScriptCore\n\n");
    self.$puts("Usage:");
    self.$puts("opala [OPTIONs] [PATH|CODE]\n\n");
    self.$puts("OPTIONS:");
    return ($a = ($b = $scope.get('OPTIONS')).$map, $a.$$p = (TMP_1 = function(k, v){var self = TMP_1.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
    return self.$print($rb_plus((("-") + (k)).$ljust(10), "" + (v) + "\n"))}, TMP_1.$$s = self, TMP_1), $a).call($b);
  };
  try {
  Opal.cdecl($scope, 'PROGRAM', $scope.get('Program').$new());
    opts = (($scope.get('Getopt')).$$scope.get('Std')).$getopts("d:vhwcejsr:EDU:");
    $gvars["0"] = "(file)";
    if ((($a = opts['$[]']("D")) !== nil && (!$a.$$is_boolean || $a == true))) {
      $scope.get('VRbJS').$set_debug(true)};
    if ((($a = ($b = opts['$[]']("E")['$!']()['$!'](), $b !== false && $b !== nil ?opts['$[]']("w")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
      self.$puts("WARN: -E without -w is useless")};
    if ((($a = ((($b = ((($c = ((($d = opts['$[]']("v")) !== false && $d !== nil) ? $d : opts['$[]']("h"))) !== false && $c !== nil) ? $c : opts['$[]']("d"))) !== false && $b !== nil) ? $b : (($c = opts['$[]']("U"), $c !== false && $c !== nil ?opts['$[]']("w")['$!']() : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
      if ((($a = opts['$[]']("v")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$puts($scope.get('VERSION'))
      } else if ((($a = opts['$[]']("h")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$usage()
      } else if ((($a = opts['$[]']("d")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$puts($scope.get('PROGRAM').$dump(opts['$[]']("d")))
        } else {
        return nil
      }
    } else if ((($a = opts['$[]']("c")) !== nil && (!$a.$$is_boolean || $a == true))) {
      if ((($a = opts.$length()['$=='](1)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise("Too many options passed. -c takes 0 options")};
      source = $scope.get('PROGRAM').$read($scope.get('ARGV').$last());
      Opal.require('opal-parser');
      return $scope.get('PROGRAM').$write($rb_plus($scope.get('ARGV').$last(), ".js"), Opal.compile(source));
      } else {
      $gvars["0"] = "(file)";
      parser = true;
      if ((($a = opts['$[]']("e")) !== nil && (!$a.$$is_boolean || $a == true))) {
        code = $scope.get('ARGV').$last()
      } else if ((($a = opts['$[]']("j")) !== nil && (!$a.$$is_boolean || $a == true))) {
        code = $scope.get('ARGV').$last();
        parser = false;
        } else {
        $gvars["0"] = $scope.get('ARGV').$shift();
        code = false;
        ($a = ($b = $scope.get('ARGV')).$each, $a.$$p = (TMP_2 = function(a){var self = TMP_2.$$s || this;
if (a == null) a = nil;
        return $scope.get('PROGRAM').$append_argv(a)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        if ((($a = $gvars["0"].$split(".").$last()['$==']("rb")['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          parser = false};
      };
      if ((($a = opts['$[]']("r")['$is_a?']($scope.get('Array'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = opts['$[]']("r")['$!']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("r", [opts['$[]']("r")])
          } else {
          opts['$[]=']("r", [])
        }};
      self.$p(opts['$[]']("r"));
      return $scope.get('PROGRAM').$run(code, opts['$[]']("w")['$!']()['$!'](), parser, opts['$[]']("D")['$!']()['$!'](), opts['$[]']("E")['$!']()['$!'](), $gvars["0"], opts['$[]']("r"), ((($a = opts['$[]']("U")) !== false && $a !== nil) ? $a : ""));
    };
  } catch ($err) {if (true) {e = $err;
    return self.$usage(e)
    }else { throw $err; }
  };
})(Opal);
