/* Generated by Opal 0.9.0.dev */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$push', '$native_type', '$allocate', '$instance_variable_set']);
  (function($base) {
    var self = $module($base, 'JSUtils');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return (self.$$proto.$native_type = function() {
        var self = this;

        return JSUtils;
      }, nil) && 'native_type'
    })(self.$singleton_class());

    Opal.defs(self, '$init_seed', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_1.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['init_seed'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$require', TMP_2 = function() {
      var self = this, $iter = TMP_2.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_2.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['require'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$get_env', TMP_3 = function() {
      var self = this, $iter = TMP_3.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_3.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['get_env'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$spawn', TMP_4 = function() {
      var self = this, $iter = TMP_4.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_4.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['spawn'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$exit', TMP_5 = function() {
      var self = this, $iter = TMP_5.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_5.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['exit'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$add_search_path', TMP_6 = function() {
      var self = this, $iter = TMP_6.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_6.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['add_search_path'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$set_argv', TMP_7 = function() {
      var self = this, $iter = TMP_7.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_7.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['set_argv'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$get_variable', TMP_8 = function() {
      var self = this, $iter = TMP_8.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_8.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['get_variable'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$get_file', TMP_9 = function() {
      var self = this, $iter = TMP_9.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_9.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['get_file'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$waitpid', TMP_10 = function() {
      var self = this, $iter = TMP_10.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_10.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['waitpid'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$set_file', TMP_11 = function() {
      var self = this, $iter = TMP_11.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_11.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['set_file'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$load_so', TMP_12 = function() {
      var self = this, $iter = TMP_12.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_12.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['load_so'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$get_argv', TMP_13 = function() {
      var self = this, $iter = TMP_13.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_13.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['get_argv'].apply(self.$native_type(), o);
    });

    Opal.defs(self, '$set_variable', TMP_14 = function() {
      var self = this, $iter = TMP_14.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_14.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self.$native_type()['set_variable'].apply(self.$native_type(), o);
    });
  })(self);
  return (function($base, $super) {
    function $Console(){};
    var self = $Console = $klass($base, $super, 'Console', $Console);

    var def = self.$$proto, $scope = self.$$scope, TMP_15, TMP_16, TMP_17;

    def["native"] = nil;
    Opal.defs(self, '$new', TMP_15 = function() {
      var self = this, $iter = TMP_15.$$p, b = $iter || nil, ins = nil;

      var o = $slice.call(arguments, 0);
      TMP_15.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      ins = self.$allocate();
      ins.$instance_variable_set("@native", new Console(o));
      return ins;
    });

    Opal.defs(self, '$wrap', function(n) {
      var self = this, ins = nil;

      ins = self.$allocate();
      ins.$instance_variable_set("@native", n);
      return ins;
    });

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return (self.$$proto.$native_type = function() {
        var self = this;

        return Console;
      }, nil) && 'native_type'
    })(self.$singleton_class());

    def.$log = TMP_16 = function() {
      var self = this, $iter = TMP_16.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_16.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self["native"]['log'].apply(self["native"], o);
    };

    return (def.$warn = TMP_17 = function() {
      var self = this, $iter = TMP_17.$$p, b = $iter || nil;

      var o = $slice.call(arguments, 0);
      TMP_17.$$p = null;
      if (b !== false && b !== nil) {
        o.$push(b)};
      return self["native"]['warn'].apply(self["native"], o);
    }, nil) && 'warn';
  })(self, null);
})(Opal);
